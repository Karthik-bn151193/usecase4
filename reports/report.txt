#Deployment Report
This file was generated during the github actions workflow run.

## Terraform Plan Output
[command]/home/runner/work/_temp/c7469e14-06a1-4487-b950-bb3d57adb723/terraform-bin plan -no-color -lock=false
module.dynamodb_table.aws_dynamodb_table.main: Refreshing state... [id=UserDataTable]
module.lambda_add.data.aws_caller_identity.current: Reading...
module.lambda_retrieve.data.aws_region.current: Reading...
module.lambda_add.aws_iam_role.lambda_role: Refreshing state... [id=user-data-add-role20250418122135669100000001]
module.lambda_retrieve.aws_iam_role.lambda_role: Refreshing state... [id=user-data-retrieve-role20250418122135670300000002]
module.lambda_add.data.aws_region.current: Reading...
module.lambda_retrieve.data.aws_caller_identity.current: Reading...
module.lambda_retrieve.data.aws_region.current: Read complete after 0s [id=us-east-1]
module.lambda_add.data.aws_region.current: Read complete after 0s [id=us-east-1]
module.lambda_add.data.aws_caller_identity.current: Read complete after 0s [id=945839052546]
module.lambda_add.aws_iam_policy.lambda_policy: Refreshing state... [id=arn:aws:iam::945839052546:policy/user-data-add-policy20250418122135737400000003]
module.lambda_retrieve.data.aws_caller_identity.current: Read complete after 0s [id=945839052546]
module.lambda_retrieve.aws_iam_policy.lambda_policy: Refreshing state... [id=arn:aws:iam::945839052546:policy/user-data-retrieve-policy20250418122135804600000004]
module.lambda_retrieve.aws_iam_role_policy_attachment.lambda_policy_attachment: Refreshing state... [id=user-data-retrieve-role20250418122135670300000002-20250418122136452400000005]
module.lambda_add.aws_iam_role_policy_attachment.lambda_policy_attachment: Refreshing state... [id=user-data-add-role20250418122135669100000001-20250418122136684100000006]

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  + create
 <= read (data resources)

Terraform will perform the following actions:

  # module.api_gateway.data.aws_region.current will be read during apply
  # (depends on a resource or a module with changes pending)
 <= data "aws_region" "current" {
      + description = (known after apply)
      + endpoint    = (known after apply)
      + id          = (known after apply)
      + name        = (known after apply)
    }

  # module.api_gateway.aws_api_gateway_deployment.main will be created
  + resource "aws_api_gateway_deployment" "main" {
      + created_date  = (known after apply)
      + execution_arn = (known after apply)
      + id            = (known after apply)
      + invoke_url    = (known after apply)
      + rest_api_id   = (known after apply)
    }

  # module.api_gateway.aws_api_gateway_integration.add_user will be created
  + resource "aws_api_gateway_integration" "add_user" {
      + cache_namespace         = (known after apply)
      + connection_type         = "INTERNET"
      + content_handling        = "CONVERT_TO_TEXT"
      + http_method             = "POST"
      + id                      = (known after apply)
      + integration_http_method = "POST"
      + passthrough_behavior    = "WHEN_NO_MATCH"
      + resource_id             = (known after apply)
      + rest_api_id             = (known after apply)
      + timeout_milliseconds    = 29000
      + type                    = "AWS_PROXY"
      + uri                     = (known after apply)
    }

  # module.api_gateway.aws_api_gateway_integration.retrieve_user will be created
  + resource "aws_api_gateway_integration" "retrieve_user" {
      + cache_namespace         = (known after apply)
      + connection_type         = "INTERNET"
      + content_handling        = "CONVERT_TO_TEXT"
      + http_method             = "GET"
      + id                      = (known after apply)
      + integration_http_method = "POST"
      + passthrough_behavior    = "WHEN_NO_MATCH"
      + resource_id             = (known after apply)
      + rest_api_id             = (known after apply)
      + timeout_milliseconds    = 29000
      + type                    = "AWS_PROXY"
      + uri                     = (known after apply)
    }

  # module.api_gateway.aws_api_gateway_method.get_user will be created
  + resource "aws_api_gateway_method" "get_user" {
      + api_key_required   = false
      + authorization      = "NONE"
      + http_method        = "GET"
      + id                 = (known after apply)
      + request_parameters = {
          + "method.request.path.user_id" = true
        }
      + resource_id        = (known after apply)
      + rest_api_id        = (known after apply)
    }

  # module.api_gateway.aws_api_gateway_method.post_users will be created
  + resource "aws_api_gateway_method" "post_users" {
      + api_key_required = false
      + authorization    = "NONE"
      + http_method      = "POST"
      + id               = (known after apply)
      + resource_id      = (known after apply)
      + rest_api_id      = (known after apply)
    }

  # module.api_gateway.aws_api_gateway_resource.user_id will be created
  + resource "aws_api_gateway_resource" "user_id" {
      + id          = (known after apply)
      + parent_id   = (known after apply)
      + path        = (known after apply)
      + path_part   = "{user_id}"
      + rest_api_id = (known after apply)
    }

  # module.api_gateway.aws_api_gateway_resource.users will be created
  + resource "aws_api_gateway_resource" "users" {
      + id          = (known after apply)
      + parent_id   = (known after apply)
      + path        = (known after apply)
      + path_part   = "users"
      + rest_api_id = (known after apply)
    }

  # module.api_gateway.aws_api_gateway_rest_api.main will be created
  + resource "aws_api_gateway_rest_api" "main" {
      + api_key_source               = (known after apply)
      + arn                          = (known after apply)
      + binary_media_types           = (known after apply)
      + created_date                 = (known after apply)
      + description                  = "API Gateway for User Data Management"
      + disable_execute_api_endpoint = (known after apply)
      + execution_arn                = (known after apply)
      + id                           = (known after apply)
      + minimum_compression_size     = (known after apply)
      + name                         = "UserDataAPI"
      + policy                       = (known after apply)
      + root_resource_id             = (known after apply)
      + tags_all                     = (known after apply)

      + endpoint_configuration (known after apply)
    }

  # module.api_gateway.aws_api_gateway_stage.main will be created
  + resource "aws_api_gateway_stage" "main" {
      + arn           = (known after apply)
      + deployment_id = (known after apply)
      + execution_arn = (known after apply)
      + id            = (known after apply)
      + invoke_url    = (known after apply)
      + rest_api_id   = (known after apply)
      + stage_name    = "prod"
      + tags_all      = (known after apply)
      + web_acl_arn   = (known after apply)
    }

  # module.api_gateway.aws_lambda_permission.add_user will be created
  + resource "aws_lambda_permission" "add_user" {
      + action              = "lambda:InvokeFunction"
      + function_name       = (known after apply)
      + id                  = (known after apply)
      + principal           = "apigateway.amazonaws.com"
      + source_arn          = (known after apply)
      + statement_id        = "AllowAPIGatewayInvoke-AddUser"
      + statement_id_prefix = (known after apply)
    }

  # module.api_gateway.aws_lambda_permission.retrieve_user will be created
  + resource "aws_lambda_permission" "retrieve_user" {
      + action              = "lambda:InvokeFunction"
      + function_name       = (known after apply)
      + id                  = (known after apply)
      + principal           = "apigateway.amazonaws.com"
      + source_arn          = (known after apply)
      + statement_id        = "AllowAPIGatewayInvoke-RetrieveUser"
      + statement_id_prefix = (known after apply)
    }

  # module.lambda_add.aws_lambda_function.main will be created
  + resource "aws_lambda_function" "main" {
      + architectures                  = (known after apply)
      + arn                            = (known after apply)
      + code_sha256                    = (known after apply)
      + filename                       = "./modules/lambda/add_user/main.py"
      + function_name                  = "user-data-add"
      + handler                        = "main.handler"
      + id                             = (known after apply)
      + invoke_arn                     = (known after apply)
      + last_modified                  = (known after apply)
      + memory_size                    = 128
      + package_type                   = "Zip"
      + publish                        = false
      + qualified_arn                  = (known after apply)
      + qualified_invoke_arn           = (known after apply)
      + reserved_concurrent_executions = -1
      + role                           = "arn:aws:iam::945839052546:role/user-data-add-role20250418122135669100000001"
      + runtime                        = "python3.12"
      + signing_job_arn                = (known after apply)
      + signing_profile_version_arn    = (known after apply)
      + skip_destroy                   = false
      + source_code_hash               = (known after apply)
      + source_code_size               = (known after apply)
      + tags_all                       = (known after apply)
      + timeout                        = 30
      + version                        = (known after apply)

      + environment {
          + variables = {
              + "DYNAMODB_TABLE_NAME" = "UserDataTable"
            }
        }

      + ephemeral_storage (known after apply)

      + logging_config (known after apply)

      + tracing_config (known after apply)
    }

  # module.lambda_retrieve.aws_lambda_function.main will be created
  + resource "aws_lambda_function" "main" {
      + architectures                  = (known after apply)
      + arn                            = (known after apply)
      + code_sha256                    = (known after apply)
      + filename                       = "./modules/lambda/get_user/main.py"
      + function_name                  = "user-data-retrieve"
      + handler                        = "main.handler"
      + id                             = (known after apply)
      + invoke_arn                     = (known after apply)
      + last_modified                  = (known after apply)
      + memory_size                    = 128
      + package_type                   = "Zip"
      + publish                        = false
      + qualified_arn                  = (known after apply)
      + qualified_invoke_arn           = (known after apply)
      + reserved_concurrent_executions = -1
      + role                           = "arn:aws:iam::945839052546:role/user-data-retrieve-role20250418122135670300000002"
      + runtime                        = "python3.12"
      + signing_job_arn                = (known after apply)
      + signing_profile_version_arn    = (known after apply)
      + skip_destroy                   = false
      + source_code_hash               = (known after apply)
      + source_code_size               = (known after apply)
      + tags_all                       = (known after apply)
      + timeout                        = 30
      + version                        = (known after apply)

      + environment {
          + variables = {
              + "DYNAMODB_TABLE_NAME" = "UserDataTable"
            }
        }

      + ephemeral_storage (known after apply)

      + logging_config (known after apply)

      + tracing_config (known after apply)
    }

Plan: 13 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + add_user_lambda_arn      = (known after apply)
  + api_gateway_invoke_url   = (known after apply)
  + retrieve_user_lambda_arn = (known after apply)

─────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't
guarantee to take exactly these actions if you run "terraform apply" now.
::debug::Terraform exited with code 0.
::debug::stdout: module.dynamodb_table.aws_dynamodb_table.main: Refreshing state... [id=UserDataTable]%0Amodule.lambda_add.data.aws_caller_identity.current: Reading...%0Amodule.lambda_retrieve.data.aws_region.current: Reading...%0Amodule.lambda_add.aws_iam_role.lambda_role: Refreshing state... [id=user-data-add-role20250418122135669100000001]%0Amodule.lambda_retrieve.aws_iam_role.lambda_role: Refreshing state... [id=user-data-retrieve-role20250418122135670300000002]%0Amodule.lambda_add.data.aws_region.current: Reading...%0Amodule.lambda_retrieve.data.aws_caller_identity.current: Reading...%0Amodule.lambda_retrieve.data.aws_region.current: Read complete after 0s [id=us-east-1]%0Amodule.lambda_add.data.aws_region.current: Read complete after 0s [id=us-east-1]%0Amodule.lambda_add.data.aws_caller_identity.current: Read complete after 0s [id=945839052546]%0Amodule.lambda_add.aws_iam_policy.lambda_policy: Refreshing state... [id=arn:aws:iam::945839052546:policy/user-data-add-policy20250418122135737400000003]%0Amodule.lambda_retrieve.data.aws_caller_identity.current: Read complete after 0s [id=945839052546]%0Amodule.lambda_retrieve.aws_iam_policy.lambda_policy: Refreshing state... [id=arn:aws:iam::945839052546:policy/user-data-retrieve-policy20250418122135804600000004]%0Amodule.lambda_retrieve.aws_iam_role_policy_attachment.lambda_policy_attachment: Refreshing state... [id=user-data-retrieve-role20250418122135670300000002-20250418122136452400000005]%0Amodule.lambda_add.aws_iam_role_policy_attachment.lambda_policy_attachment: Refreshing state... [id=user-data-add-role20250418122135669100000001-20250418122136684100000006]%0A%0ATerraform used the selected providers to generate the following execution%0Aplan. Resource actions are indicated with the following symbols:%0A  + create%0A <= read (data resources)%0A%0ATerraform will perform the following actions:%0A%0A  # module.api_gateway.data.aws_region.current will be read during apply%0A  # (depends on a resource or a module with changes pending)%0A <= data "aws_region" "current" {%0A      + description = (known after apply)%0A      + endpoint    = (known after apply)%0A      + id          = (known after apply)%0A      + name        = (known after apply)%0A    }%0A%0A  # module.api_gateway.aws_api_gateway_deployment.main will be created%0A  + resource "aws_api_gateway_deployment" "main" {%0A      + created_date  = (known after apply)%0A      + execution_arn = (known after apply)%0A      + id            = (known after apply)%0A      + invoke_url    = (known after apply)%0A      + rest_api_id   = (known after apply)%0A    }%0A%0A  # module.api_gateway.aws_api_gateway_integration.add_user will be created%0A  + resource "aws_api_gateway_integration" "add_user" {%0A      + cache_namespace         = (known after apply)%0A      + connection_type         = "INTERNET"%0A      + content_handling        = "CONVERT_TO_TEXT"%0A      + http_method             = "POST"%0A      + id                      = (known after apply)%0A      + integration_http_method = "POST"%0A      + passthrough_behavior    = "WHEN_NO_MATCH"%0A      + resource_id             = (known after apply)%0A      + rest_api_id             = (known after apply)%0A      + timeout_milliseconds    = 29000%0A      + type                    = "AWS_PROXY"%0A      + uri                     = (known after apply)%0A    }%0A%0A  # module.api_gateway.aws_api_gateway_integration.retrieve_user will be created%0A  + resource "aws_api_gateway_integration" "retrieve_user" {%0A      + cache_namespace         = (known after apply)%0A      + connection_type         = "INTERNET"%0A      + content_handling        = "CONVERT_TO_TEXT"%0A      + http_method             = "GET"%0A      + id                      = (known after apply)%0A      + integration_http_method = "POST"%0A      + passthrough_behavior    = "WHEN_NO_MATCH"%0A      + resource_id             = (known after apply)%0A      + rest_api_id             = (known after apply)%0A      + timeout_milliseconds    = 29000%0A      + type                    = "AWS_PROXY"%0A      + uri                     = (known after apply)%0A    }%0A%0A  # module.api_gateway.aws_api_gateway_method.get_user will be created%0A  + resource "aws_api_gateway_method" "get_user" {%0A      + api_key_required   = false%0A      + authorization      = "NONE"%0A      + http_method        = "GET"%0A      + id                 = (known after apply)%0A      + request_parameters = {%0A          + "method.request.path.user_id" = true%0A        }%0A      + resource_id        = (known after apply)%0A      + rest_api_id        = (known after apply)%0A    }%0A%0A  # module.api_gateway.aws_api_gateway_method.post_users will be created%0A  + resource "aws_api_gateway_method" "post_users" {%0A      + api_key_required = false%0A      + authorization    = "NONE"%0A      + http_method      = "POST"%0A      + id               = (known after apply)%0A      + resource_id      = (known after apply)%0A      + rest_api_id      = (known after apply)%0A    }%0A%0A  # module.api_gateway.aws_api_gateway_resource.user_id will be created%0A  + resource "aws_api_gateway_resource" "user_id" {%0A      + id          = (known after apply)%0A      + parent_id   = (known after apply)%0A      + path        = (known after apply)%0A      + path_part   = "{user_id}"%0A      + rest_api_id = (known after apply)%0A    }%0A%0A  # module.api_gateway.aws_api_gateway_resource.users will be created%0A  + resource "aws_api_gateway_resource" "users" {%0A      + id          = (known after apply)%0A      + parent_id   = (known after apply)%0A      + path        = (known after apply)%0A      + path_part   = "users"%0A      + rest_api_id = (known after apply)%0A    }%0A%0A  # module.api_gateway.aws_api_gateway_rest_api.main will be created%0A  + resource "aws_api_gateway_rest_api" "main" {%0A      + api_key_source               = (known after apply)%0A      + arn                          = (known after apply)%0A      + binary_media_types           = (known after apply)%0A      + created_date                 = (known after apply)%0A      + description                  = "API Gateway for User Data Management"%0A      + disable_execute_api_endpoint = (known after apply)%0A      + execution_arn                = (known after apply)%0A      + id                           = (known after apply)%0A      + minimum_compression_size     = (known after apply)%0A      + name                         = "UserDataAPI"%0A      + policy                       = (known after apply)%0A      + root_resource_id             = (known after apply)%0A      + tags_all                     = (known after apply)%0A%0A      + endpoint_configuration (known after apply)%0A    }%0A%0A  # module.api_gateway.aws_api_gateway_stage.main will be created%0A  + resource "aws_api_gateway_stage" "main" {%0A      + arn           = (known after apply)%0A      + deployment_id = (known after apply)%0A      + execution_arn = (known after apply)%0A      + id            = (known after apply)%0A      + invoke_url    = (known after apply)%0A      + rest_api_id   = (known after apply)%0A      + stage_name    = "prod"%0A      + tags_all      = (known after apply)%0A      + web_acl_arn   = (known after apply)%0A    }%0A%0A  # module.api_gateway.aws_lambda_permission.add_user will be created%0A  + resource "aws_lambda_permission" "add_user" {%0A      + action              = "lambda:InvokeFunction"%0A      + function_name       = (known after apply)%0A      + id                  = (known after apply)%0A      + principal           = "apigateway.amazonaws.com"%0A      + source_arn          = (known after apply)%0A      + statement_id        = "AllowAPIGatewayInvoke-AddUser"%0A      + statement_id_prefix = (known after apply)%0A    }%0A%0A  # module.api_gateway.aws_lambda_permission.retrieve_user will be created%0A  + resource "aws_lambda_permission" "retrieve_user" {%0A      + action              = "lambda:InvokeFunction"%0A      + function_name       = (known after apply)%0A      + id                  = (known after apply)%0A      + principal           = "apigateway.amazonaws.com"%0A      + source_arn          = (known after apply)%0A      + statement_id        = "AllowAPIGatewayInvoke-RetrieveUser"%0A      + statement_id_prefix = (known after apply)%0A    }%0A%0A  # module.lambda_add.aws_lambda_function.main will be created%0A  + resource "aws_lambda_function" "main" {%0A      + architectures                  = (known after apply)%0A      + arn                            = (known after apply)%0A      + code_sha256                    = (known after apply)%0A      + filename                       = "./modules/lambda/add_user/main.py"%0A      + function_name                  = "user-data-add"%0A      + handler                        = "main.handler"%0A      + id                             = (known after apply)%0A      + invoke_arn                     = (known after apply)%0A      + last_modified                  = (known after apply)%0A      + memory_size                    = 128%0A      + package_type                   = "Zip"%0A      + publish                        = false%0A      + qualified_arn                  = (known after apply)%0A      + qualified_invoke_arn           = (known after apply)%0A      + reserved_concurrent_executions = -1%0A      + role                           = "arn:aws:iam::945839052546:role/user-data-add-role20250418122135669100000001"%0A      + runtime                        = "python3.12"%0A      + signing_job_arn                = (known after apply)%0A      + signing_profile_version_arn    = (known after apply)%0A      + skip_destroy                   = false%0A      + source_code_hash               = (known after apply)%0A      + source_code_size               = (known after apply)%0A      + tags_all                       = (known after apply)%0A      + timeout                        = 30%0A      + version                        = (known after apply)%0A%0A      + environment {%0A          + variables = {%0A              + "DYNAMODB_TABLE_NAME" = "UserDataTable"%0A            }%0A        }%0A%0A      + ephemeral_storage (known after apply)%0A%0A      + logging_config (known after apply)%0A%0A      + tracing_config (known after apply)%0A    }%0A%0A  # module.lambda_retrieve.aws_lambda_function.main will be created%0A  + resource "aws_lambda_function" "main" {%0A      + architectures                  = (known after apply)%0A      + arn                            = (known after apply)%0A      + code_sha256                    = (known after apply)%0A      + filename                       = "./modules/lambda/get_user/main.py"%0A      + function_name                  = "user-data-retrieve"%0A      + handler                        = "main.handler"%0A      + id                             = (known after apply)%0A      + invoke_arn                     = (known after apply)%0A      + last_modified                  = (known after apply)%0A      + memory_size                    = 128%0A      + package_type                   = "Zip"%0A      + publish                        = false%0A      + qualified_arn                  = (known after apply)%0A      + qualified_invoke_arn           = (known after apply)%0A      + reserved_concurrent_executions = -1%0A      + role                           = "arn:aws:iam::945839052546:role/user-data-retrieve-role20250418122135670300000002"%0A      + runtime                        = "python3.12"%0A      + signing_job_arn                = (known after apply)%0A      + signing_profile_version_arn    = (known after apply)%0A      + skip_destroy                   = false%0A      + source_code_hash               = (known after apply)%0A      + source_code_size               = (known after apply)%0A      + tags_all                       = (known after apply)%0A      + timeout                        = 30%0A      + version                        = (known after apply)%0A%0A      + environment {%0A          + variables = {%0A              + "DYNAMODB_TABLE_NAME" = "UserDataTable"%0A            }%0A        }%0A%0A      + ephemeral_storage (known after apply)%0A%0A      + logging_config (known after apply)%0A%0A      + tracing_config (known after apply)%0A    }%0A%0APlan: 13 to add, 0 to change, 0 to destroy.%0A%0AChanges to Outputs:%0A  + add_user_lambda_arn      = (known after apply)%0A  + api_gateway_invoke_url   = (known after apply)%0A  + retrieve_user_lambda_arn = (known after apply)%0A%0A─────────────────────────────────────────────────────────────────────────────%0A%0ANote: You didn't use the -out option to save this plan, so Terraform can't%0Aguarantee to take exactly these actions if you run "terraform apply" now.%0A
::debug::stderr: 
::debug::exitcode: 0
